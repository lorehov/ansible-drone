---
- name: Validate database driver
  assert:
    that:
      - drone_database_driver in ['sqlite3', 'mysql']

- name: Install dependencies via apt
  apt:
    name: "{{ item }}"
    cache_valid_time: 86400
    update_cache: yes
  with_items:
    - python-pip

- name: Install dependencies via pip
  pip:
    name: "{{ item.name }}"
    version: "{{ item.version }}"
  with_items:
    - name: docker-py
      version: 1.2.3

- name: Check for drone
  stat:
    path: /usr/local/bin/drone
  register: drone_stat

- name: Determine if Drone should be installed
  set_fact:
    install_drone: "{{ not drone_stat.stat.exists or upgrade_drone|default(False)|bool == True }}"

- name: Download drone.deb
  get_url:
    url: "http://downloads.drone.io/master/drone.deb"
    dest: /tmp/drone.deb
    force: "{{ install_drone|default(False)|bool }}"
  register: drone_get

- name: Install drone.deb
  apt:
    deb: /tmp/drone.deb
  register: drone_dpkg
  when: install_drone|default(False)|bool
  notify:
   - restart drone

- name: Install required drone images
  docker:
    name: "{{ item|md5 }}"
    image: "{{ item }}"
    command: "/bin/true"
    state: present
  with_items:
    - bradrydzewski/ubuntu
    - bradrydzewski/base

- name: Install optionally specified drone images
  docker:
    name: "{{ item.image|md5 }}"
    image: "{{ item.image }}"
    command: "/bin/true"
    state: "{{ item['state']|default('present') }}"
  with_items: drone_images|default([])

- name: Install sqlite3 for drone configuration
  apt:
    name: "{{ item }}"
    cache_valid_time: 86400
    update_cache: yes
  with_items:
    - "sqlite3"
    - "libsqlite3-dev"
  when: drone_database_driver == 'sqlite3'

- name: Template sqlite file for drone database configuration
  template:
    src: drone.sqlite.sql.j2
    dest: /etc/drone/drone.sqlite.sql
    owner: root
    group: root
    mode: 0600
  when: drone_database_driver == 'sqlite3'

- name: Template mysql file for drone database configuration
  template:
    src: drone.mysql.sql.j2
    dest: /etc/drone/drone.mysql.sql
    owner: root
    group: root
    mode: 0600
  when: drone_database_driver == 'mysql'

- name: Template TOML file for drone daemon configuration
  template:
    src: drone.toml.j2
    dest: /etc/drone/drone.toml
    owner: root
    group: root
    mode: 0600
  notify:
    - restart drone

- name: Flush restart handlers if needed
  meta: flush_handlers

- name: Hash sqlite3 tables to validate change
  shell: "sqlite3 /var/lib/drone/drone.sqlite 'SELECT * FROM users;' | md5sum"
  register: drone_before_hash
  changed_when: False
  when: drone_database_driver == 'sqlite3'

- name: Configure sqlite3 drone database settings
  shell: "sqlite3 {{ drone_database_datasource }} '.read /etc/drone/drone.sqlite.sql' && sqlite3 {{ drone_database_datasource }} 'SELECT * FROM users;' | md5sum"
  register: drone_after_hash
  changed_when: drone_after_hash.stdout|trim != drone_before_hash.stdout|trim
  when: drone_database_driver == 'sqlite3'

- name: Hash mysql tables to validate change
  shell: "mysql drone --batch -sre 'SELECT * FROM users;' | md5sum"
  register: drone_before_hash
  changed_when: False
  when: drone_database_driver == 'mysql'

- name: Configure mysql drone database settings
  shell: "mysql drone < /etc/drone/drone.mysql.sql && mysql drone --batch -sre 'SELECT * FROM users;' | md5sum"
  register: drone_after_hash
  changed_when: drone_after_hash.stdout|default('')|trim != drone_before_hash.stdout|default('')|trim
  when: drone_database_driver == 'mysql'

- name: Ensure drone is started
  service:
    name: drone
    state: started
    enabled: yes
